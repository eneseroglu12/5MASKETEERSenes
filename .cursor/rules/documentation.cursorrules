# Documentation Guidelines

## Documentation Principles
- Document complex logic and non-obvious code decisions
- Follow official Flutter, Riverpod, and Supabase documentation for best practices
- Use clear and concise language
- Keep documentation up to date with code changes
- Use Turkish comments to explain code (as per specific requirements)
- Document public APIs thoroughly
- Provide examples for complex implementations

## Code Documentation
- Use meaningful comments to explain why, not what
- Document the purpose and behavior of public methods and classes
- Explain complex algorithms and business logic
- Use Turkish comments very often to explain the codes (per requirements)
- Document any assumptions or constraints
- Explain the reasoning behind design decisions

## API Documentation
- Document all public interfaces
- Include parameter descriptions and types
- Document return values and possible exceptions
- Provide usage examples
- Document any side effects
- Include version information when relevant

## Architectural Documentation
- Document architectural decisions and rationale
- Explain design patterns used
- Document layer responsibilities in Clean Architecture
- Explain data flow between components
- Document dependency relationships
- Maintain architecture decision records (ADRs)

## README Documentation
- Provide clear project overview
- Include setup and installation instructions
- Document development workflow
- Explain project structure
- Include testing instructions
- Document deployment procedures
- Provide troubleshooting guides

## Code Examples
```dart
/// Kullanıcı bilgilerini getirir ve önbelleğe alır
/// Gets user information and caches it
/// 
/// [userId] - Getirilecek kullanıcının ID'si / ID of the user to fetch
/// 
/// Returns [Right<User>] başarılı durumda / on success
/// Returns [Left<Failure>] hata durumunda / on failure
/// 
/// Throws [ArgumentError] if userId is null or empty
Future<Either<Failure, User>> getUser(String userId) async {
  // Giriş parametrelerini doğrula / Validate input parameters
  if (userId.isEmpty) {
    throw ArgumentError('User ID cannot be empty');
  }

  // Ağ bağlantısını kontrol et / Check network connectivity
  if (await networkInfo.isConnected) {
    try {
      // Uzak sunucudan kullanıcı bilgilerini getir / Fetch user from remote
      final remoteUser = await remoteDataSource.getUser(userId);
      
      // Yerel önbelleğe kaydet / Cache locally
      await localDataSource.cacheUser(remoteUser);
      
      return Right(remoteUser.toDomain());
    } on ServerException {
      return Left(ServerFailure('Sunucu hatası oluştu'));
    }
  } else {
    // Çevrimdışı mod: önbellekten getir / Offline mode: fetch from cache
    try {
      final localUser = await localDataSource.getLastUser();
      return Right(localUser.toDomain());
    } on CacheException {
      return Left(CacheFailure('Önbellek verisi bulunamadı'));
    }
  }
}
```

## Feature Documentation
- Document feature requirements and specifications
- Explain user stories and acceptance criteria
- Document feature dependencies
- Include wireframes or mockups when relevant
- Document testing scenarios
- Explain feature toggles or configuration

## Error Documentation
- Document common error scenarios
- Provide troubleshooting steps
- Explain error codes and messages
- Document recovery procedures
- Include debugging tips
- Document known issues and workarounds

## Performance Documentation
- Document performance requirements
- Explain optimization strategies
- Document benchmarks and metrics
- Include profiling results
- Document performance bottlenecks
- Explain caching strategies

## Security Documentation
- Document security considerations
- Explain authentication and authorization
- Document data protection measures
- Include security testing procedures
- Document compliance requirements
- Explain threat mitigation strategies

## Testing Documentation
- Document testing strategy
- Explain test scenarios and coverage
- Document test data requirements
- Include testing procedures
- Document automated test setup
- Explain continuous integration setup

## Deployment Documentation
- Document deployment procedures
- Explain environment configurations
- Document rollback procedures
- Include monitoring and logging setup
- Document backup and recovery procedures
- Explain scaling considerations

## Documentation Maintenance
- Review documentation during code reviews
- Update documentation with code changes
- Regular documentation audits
- Remove outdated documentation
- Version control for documentation
- Collaborative documentation editing

## Documentation Tools
- Use inline code documentation (dartdoc)
- Maintain external documentation (markdown files)
- Use architectural diagramming tools
- Document APIs with proper tools
- Use version control for documentation
- Automated documentation generation where possible

## Best Practices
- Write documentation as you code
- Use consistent formatting and style
- Include practical examples
- Keep documentation concise but complete
- Use visual aids when helpful
- Test documentation accuracy
- Make documentation searchable
- Consider your audience

## Documentation Checklist
- [ ] Public APIs are documented
- [ ] Complex logic is explained
- [ ] Turkish comments are added for code explanation
- [ ] Examples are provided
- [ ] Architecture decisions are documented
- [ ] Setup instructions are clear
- [ ] Testing procedures are documented
- [ ] Error handling is explained
- [ ] Performance considerations are noted
- [ ] Security aspects are covered

## Common Documentation Patterns
- **Class Documentation**: Purpose, responsibilities, usage examples
- **Method Documentation**: Parameters, return values, exceptions, examples
- **Feature Documentation**: Requirements, implementation, testing
- **API Documentation**: Endpoints, parameters, responses, examples
- **Architecture Documentation**: Diagrams, patterns, decisions
- **Setup Documentation**: Prerequisites, installation, configuration 