# Testing Guidelines

## Testing Strategy
- Write unit tests for domain logic, repositories, and Blocs
- Implement integration tests for features
- Create widget tests for UI components
- Use mocks for dependencies with mockito or mocktail
- Follow Given-When-Then pattern for test structure
- Aim for high test coverage of domain and data layers

## Unit Testing
- Follow the Arrange-Act-Assert convention for tests
- Name test variables clearly
- Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function
- Use test doubles to simulate dependencies
- Except for third-party dependencies that are not expensive to execute

## Flutter-Specific Testing
- Use the standard widget testing for flutter
- Use integration tests for each API module
- Test UI components in isolation
- Mock external dependencies in widget tests
- Test different screen sizes and orientations

## Test Structure
- Follow the Given-When-Then convention for acceptance tests
- Arrange: Set up test data and mocks
- Act: Execute the function or method being tested
- Assert: Verify the expected outcome

## Test Organization
```dart
// Example unit test structure
group('UserRepository', () {
  late UserRepository repository;
  late MockUserRemoteDataSource mockRemoteDataSource;
  late MockUserLocalDataSource mockLocalDataSource;
  late MockNetworkInfo mockNetworkInfo;

  setUp(() {
    mockRemoteDataSource = MockUserRemoteDataSource();
    mockLocalDataSource = MockUserLocalDataSource();
    mockNetworkInfo = MockNetworkInfo();
    repository = UserRepositoryImpl(
      remoteDataSource: mockRemoteDataSource,
      localDataSource: mockLocalDataSource,
      networkInfo: mockNetworkInfo,
    );
  });

  group('getUser', () {
    const userId = '123';
    const userModel = UserModel(id: userId, name: 'Test User');
    const user = User(id: userId, name: 'Test User');

    test('should return user when call to remote data source is successful', () async {
      // arrange
      when(() => mockNetworkInfo.isConnected).thenAnswer((_) async => true);
      when(() => mockRemoteDataSource.getUser(userId))
          .thenAnswer((_) async => userModel);
      when(() => mockLocalDataSource.cacheUser(userModel))
          .thenAnswer((_) async => {});

      // act
      final result = await repository.getUser(userId);

      // assert
      expect(result, equals(Right(user)));
      verify(() => mockRemoteDataSource.getUser(userId));
      verify(() => mockLocalDataSource.cacheUser(userModel));
    });

    test('should return cached user when device is offline', () async {
      // arrange
      when(() => mockNetworkInfo.isConnected).thenAnswer((_) async => false);
      when(() => mockLocalDataSource.getLastUser())
          .thenAnswer((_) async => userModel);

      // act
      final result = await repository.getUser(userId);

      // assert
      expect(result, equals(Right(user)));
      verify(() => mockLocalDataSource.getLastUser());
      verifyNever(() => mockRemoteDataSource.getUser(any()));
    });

    test('should return ServerFailure when remote call fails', () async {
      // arrange
      when(() => mockNetworkInfo.isConnected).thenAnswer((_) async => true);
      when(() => mockRemoteDataSource.getUser(userId))
          .thenThrow(ServerException());

      // act
      final result = await repository.getUser(userId);

      // assert
      expect(result, equals(Left(ServerFailure())));
    });
  });
});
```

## Widget Testing
```dart
// Example widget test
group('UserPage Widget', () {
  late MockUserBloc mockUserBloc;

  setUp(() {
    mockUserBloc = MockUserBloc();
  });

  testWidgets('should display loading indicator when state is loading', (tester) async {
    // arrange
    when(() => mockUserBloc.state).thenReturn(const UserState.loading());
    when(() => mockUserBloc.stream).thenAnswer((_) => const Stream.empty());

    // act
    await tester.pumpWidget(
      MaterialApp(
        home: BlocProvider<UserBloc>.value(
          value: mockUserBloc,
          child: const UserPage(userId: '123'),
        ),
      ),
    );

    // assert
    expect(find.byType(CircularProgressIndicator), findsOneWidget);
  });

  testWidgets('should display user details when state is loaded', (tester) async {
    // arrange
    const user = User(id: '123', name: 'Test User');
    when(() => mockUserBloc.state).thenReturn(const UserState.loaded(user));
    when(() => mockUserBloc.stream).thenAnswer((_) => const Stream.empty());

    // act
    await tester.pumpWidget(
      MaterialApp(
        home: BlocProvider<UserBloc>.value(
          value: mockUserBloc,
          child: const UserPage(userId: '123'),
        ),
      ),
    );

    // assert
    expect(find.text('Test User'), findsOneWidget);
    expect(find.byType(UserDetailsWidget), findsOneWidget);
  });
});
```

## Bloc Testing
```dart
// Example bloc test
group('UserBloc', () {
  late UserBloc userBloc;
  late MockGetUser mockGetUser;

  setUp(() {
    mockGetUser = MockGetUser();
    userBloc = UserBloc(getUser: mockGetUser);
  });

  tearDown(() {
    userBloc.close();
  });

  test('initial state should be UserState.initial', () {
    expect(userBloc.state, equals(const UserState.initial()));
  });

  blocTest<UserBloc, UserState>(
    'should emit [loading, loaded] when GetUser succeeds',
    build: () {
      when(() => mockGetUser('123'))
          .thenAnswer((_) async => const Right(User(id: '123', name: 'Test User')));
      return userBloc;
    },
    act: (bloc) => bloc.add(const UserEvent.getUser('123')),
    expect: () => [
      const UserState.loading(),
      const UserState.loaded(User(id: '123', name: 'Test User')),
    ],
  );

  blocTest<UserBloc, UserState>(
    'should emit [loading, error] when GetUser fails',
    build: () {
      when(() => mockGetUser('123'))
          .thenAnswer((_) async => Left(ServerFailure()));
      return userBloc;
    },
    act: (bloc) => bloc.add(const UserEvent.getUser('123')),
    expect: () => [
      const UserState.loading(),
      UserState.error(ServerFailure()),
    ],
  );
});
```

## Integration Testing
- Test complete user flows end-to-end
- Test API integration with real or mock servers
- Verify navigation between screens
- Test data persistence and retrieval
- Validate error handling across the entire flow

## Mocking Guidelines
- Use proper abstractions that can be easily mocked for testing
- Create mocks for external dependencies
- Mock network calls and database operations
- Use dependency injection to make testing easier
- Keep mocks simple and focused

## Test Coverage
- Aim for high test coverage of domain and data layers
- Focus on testing business logic thoroughly
- Test error scenarios and edge cases
- Coverage is important but not the only metric
- Prioritize testing critical paths and complex logic

## Performance Testing
- Test widget performance with large datasets
- Verify memory usage in long-running tests
- Test scroll performance with ListView.builder
- Validate image loading and caching performance
- Profile test execution times

## Test Naming Conventions
- Use descriptive test names that explain the scenario
- Include the expected outcome in the test name
- Group related tests using group() function
- Use consistent naming patterns across the project

## Best Practices
- Keep tests isolated and independent
- Use factories for creating test data
- Clean up resources in tearDown methods
- Run tests frequently during development
- Use continuous integration for automated testing
- Test both happy path and error scenarios
- Write tests before implementing features (TDD when appropriate)
- Keep tests simple and focused on one aspect
- Use meaningful assertions and error messages 