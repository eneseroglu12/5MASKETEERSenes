# Flutter & Dart Guidelines

## Dart/Flutter Fundamentals
- Use const constructors for immutable widgets
- Leverage Freezed for immutable state classes and unions
- Use arrow syntax for simple functions and methods
- Prefer expression bodies for one-line getters and setters
- Use trailing commas for better formatting and diffs
- Use Theme.of(context).textTheme.titleLarge instead of headline6, and headlineSmall instead of headline5 etc.

## Nomenclature
- Use PascalCase for classes
- Use camelCase for variables, functions, and methods
- Use underscores_case for file and directory names
- Use UPPERCASE for environment variables
- Avoid magic numbers and define constants
- Start each function with a verb
- Use verbs for boolean variables (e.g., isLoading, hasError, canDelete)
- Use complete words instead of abbreviations and correct spelling
- Standard abbreviations allowed: API, URL, i/j for loops, err for errors, ctx for contexts

## Functions & Methods
- Write short functions with a single purpose (less than 20 instructions)
- Name functions with a verb and something else
- If returns boolean, use isX or hasX, canX etc.
- If doesn't return anything, use executeX or saveX etc.
- Avoid nesting blocks by early checks and returns
- Use higher-order functions (map, filter, reduce) to avoid function nesting
- Use arrow functions for simple functions (less than 3 instructions)
- Use default parameter values instead of checking for null
- Reduce function parameters using RO-RO (object parameters)
- Use a single level of abstraction

## Data Management
- Don't abuse primitive types and encapsulate data in composite types
- Avoid data validations in functions and use classes with internal validation
- Prefer immutability for data
- Use readonly for data that doesn't change
- Use as const for literals that don't change

## Classes & Objects
- Follow SOLID principles
- Prefer composition over inheritance
- Declare interfaces to define contracts
- Write small classes with a single purpose
- Less than 200 instructions per class
- Less than 10 public methods per class
- Less than 10 properties per class

## Navigation & Routing
- Use GoRouter or auto_route for navigation and deep linking
- Use extras to pass data between pages

## Model and Database Conventions
- Include createdAt, updatedAt, and isDeleted fields in database tables
- Use @JsonSerializable(fieldRename: FieldRename.snake) for models
- Implement @JsonKey(includeFromJson: true, includeToJson: false) for read-only fields
- Use @JsonValue(int) for enums that go to the database

## Code Generation
- Utilize build_runner for generating code from annotations (Freezed, Riverpod, JSON serialization)
- Run 'flutter pub run build_runner build --delete-conflicting-outputs' after modifying annotated classes

## Miscellaneous
- Use log instead of print for debugging
- Use Flutter Hooks / Riverpod Hooks where appropriate
- Keep lines no longer than 80 characters, adding commas before closing brackets for multi-parameter functions
- Use extensions to manage reusable code
- Use constants to manage constant values 