# UI & Design Guidelines

## UI and Styling
- Use Flutter's built-in widgets and create custom widgets
- Implement responsive design using LayoutBuilder or MediaQuery
- Use themes for consistent styling across the app
- Use ThemeData to manage themes
- Use AppLocalizations to manage translations

## Widget Design Principles
- Create small, private widget classes instead of methods like Widget _build....
- Use const widgets where possible to optimize rebuilds
- Implement responsive design using LayoutBuilder or MediaQuery
- Prefer stateless widgets when possible

## Text and Input Components
- In TextFields, set appropriate textCapitalization, keyboardType, and textInputAction
- Use Theme.of(context).textTheme.titleLarge instead of headline6
- Use headlineSmall instead of headline5 etc.

## Image Handling
- Use AssetImage for static images and cached_network_image for remote images
- Always include an errorBuilder when using Image.network
- Implement proper error handling for image loading

## List and Data Display
- Implement list view optimizations (e.g., ListView.builder)
- Use ListView.builder for large lists to optimize performance
- Implement pagination for large data sets
- Cache network resources appropriately

## User Interaction
- Implement RefreshIndicator for pull-to-refresh functionality
- Provide visual feedback for user interactions
- Handle loading states with appropriate indicators
- Use meaningful animations and transitions

## Layout and Structure
- Avoid deeply nested widget trees for better performance
- Break down complex widget trees into smaller, reusable components
- When a widget tree becomes too deep, it can lead to longer build times and increased memory usage
- A flatter widget structure makes it easier to understand and modify the code
- Reusable components facilitate better code organization
- Deeply nested widgets can make state management more challenging

## Performance Considerations
- Use const constructors for immutable widgets
- Minimize widget rebuilds with proper state management
- Use computation isolation for expensive operations with compute()
- Profile and optimize render performance
- Implement efficient rendering strategies

## Responsive Design
- Use LayoutBuilder for responsive layouts
- Consider different screen sizes and orientations
- Implement adaptive UI patterns
- Test on various device sizes
- Use flexible and expanded widgets appropriately

## Accessibility
- Provide semantic labels for screen readers
- Ensure proper contrast ratios
- Support different font sizes
- Test with accessibility tools
- Implement proper focus management

## Custom Widget Examples
```dart
// Example of a reusable custom widget
class CustomButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final bool isLoading;
  
  const CustomButton({
    Key? key,
    required this.text,
    this.onPressed,
    this.isLoading = false,
  }) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: isLoading ? null : onPressed,
      child: isLoading 
        ? const SizedBox(
            height: 16,
            width: 16,
            child: CircularProgressIndicator(strokeWidth: 2),
          )
        : Text(text),
    );
  }
}
```

## Theme Implementation
```dart
class AppTheme {
  static ThemeData lightTheme = ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(
      seedColor: Colors.blue,
      brightness: Brightness.light,
    ),
    textTheme: const TextTheme(
      titleLarge: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
      headlineSmall: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
    ),
  );
  
  static ThemeData darkTheme = ThemeData(
    useMaterial3: true,
    colorScheme: ColorScheme.fromSeed(
      seedColor: Colors.blue,
      brightness: Brightness.dark,
    ),
    textTheme: const TextTheme(
      titleLarge: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
      headlineSmall: TextStyle(fontSize: 18, fontWeight: FontWeight.w600),
    ),
  );
}
```

## Best Practices
- Keep widget trees shallow for better performance
- Use meaningful widget names
- Implement proper error states in UI
- Provide loading indicators for async operations
- Use consistent spacing and padding
- Follow Material Design or Cupertino guidelines
- Test UI on different screen sizes
- Implement proper navigation patterns
- Use appropriate input validation and feedback 